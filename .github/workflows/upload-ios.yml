name: iOS upload

on:
  push:
    branches:    
      - 'prod'
    paths:
      - "src/ios/**"
      - ".github/workflows/upload-ios.yml"

env:
  WORKING_DIRECTORY: src
  BUILD_CERTIFICATE_BASE64: ${{ secrets.IOS_BUILD_CERTIFICATE_BASE64 }}
  PROVISION_PROFILE_BASE64: ${{ secrets.IOS_PROVISION_PROFILE_BASE64 }}
  P12_PASSWORD: ${{ secrets.IOS_P12_PASSWORD }}
  KEYCHAIN_PASSWORD: ""

jobs:
  deploy:
    runs-on: macos-13
    steps:
      - name: Checkout source code
        uses: actions/checkout@v3

      # https://docs.github.com/en/actions/deployment/deploying-xcode-applications/installing-an-apple-certificate-on-macos-runners-for-xcode-development
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ env.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ env.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ env.PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ env.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Create robovm ram disk to speed up build
        run: SIZE=2048 ; diskutil erasevolume HFS+ 'RoboVM RAM Disk' `hdiutil attach -nomount ram://$((SIZE * 2048))`

      - name: Inject Provisioning profile UUID to src/ios/build.gradle
        run: |
          PP_UUID=$(grep -a -A 1 'UUID' ~/Library/MobileDevice/Provisioning\ Profiles/build_pp.mobileprovision | grep string | sed -e "s|<string>||" -e "s|</string>||" | tr -d '\t')
          sed -i -e 's/PROVISION_PROFILE_UUID/'"$PP_UUID"'/' src/ios/build.gradle

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: 17

      - name: Build the libGDX application
        working-directory: src
        run: ./gradlew ios:createIPA
  
      - name: Publish the App on TestFlight
        working-directory: src
        if: success()
        run: |
          xcrun altool \
            --upload-app \
            -t ios \
            -f ios/build/robovm/*.ipa \
            -u ${{ secrets.APPLE_ID_USERNAME }} \
            -p ${{ secrets.APPLE_ID_PASSWORD }} \
            --verbose
